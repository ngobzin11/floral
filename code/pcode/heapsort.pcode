__FUNCTION__  heapsort(arr)
__IF__  arr  __IDENTICAL_TO__   __NULL__   __THEN__
__RETURN__  arr
__END__
__DECLARE_AS__(n)   __LENGTH_OF__(arr)
__SET_TO__(arr)  heapify(arr, n)
__DECLARE_AS__(endpos)  n  __MINUS__  1
__WHILE__  endpos  __GREATER_THAN__  0  __DO__
__SET_TO__(arr)  __ARRAYS_SWAP__(endpos, 0, arr)
__DECREMENT__(endpos)
__SET_TO__(arr)  sift_down(arr, 0, endpos)
__END__
__RETURN__  arr
__END__
__FUNCTION__  heapify(arr, n)
__DECLARE_AS__(start)  ( n  __MINUS__  2 )  __OVER__  2
__WHILE__  start  __GREATER_THAN_OR_EQUAL_TO__  0  __DO__
__SET_TO__(arr)  sift_down(arr, start, n  __MINUS__  1)
__DECREMENT__(start)
__END__
__RETURN__  arr
__END__
__FUNCTION__  sift_down(arr, start, endpos)
__DECLARE_AS__(rpos)  start
__WHILE__  rpos  __TIMES__  2  __PLUS__  1  __LESS_THAN_OR_EQUAL_TO__  endpos  __DO__
__DECLARE_AS__(cpos)  rpos  __TIMES__  2  __PLUS__  1
__DECLARE_AS__(child)   __ELEMENT_AT_FROM__(cpos, arr)
__DECLARE_AS__(sibling)   __ELEMENT_AT_FROM__(cpos  __PLUS__  1, arr)
__DECLARE_AS__(root)   __ELEMENT_AT_FROM__(rpos, arr)
__IF__  cpos  __PLUS__  1  __LESS_THAN_OR_EQUAL_TO__  endpos  __AND__  child  __LESS_THAN__  sibling  __THEN__
__INCREMENT__(cpos)
__END__
__IF__  root  __LESS_THAN__  child  __THEN__
__SET_TO__(arr)  __ARRAYS_SWAP__(rpos, cpos, arr)
__SET_TO__(rpos)  cpos
__ELSE__
__RETURN__  arr
__END__
__END__
__RETURN__  arr
__END__
__FUNCTION__  __ARRAYS_SWAP__(arr, x, y)
__IF__  arr  __IDENTICAL_TO__   __NULL__   __THEN__
__RETURN__  arr
__END__
__DECLARE_AS__(n)   __LENGTH_OF__(arr)
__IF__  x  __GREATER_THAN_OR_EQUAL_TO__  n  __OR__  y  __GREATER_THAN_OR_EQUAL_TO__  n  __THEN__
__RETURN__  arr
__END__
__DECLARE_AS__(elem)   __ELEMENT_AT_FROM__(x, arr)
__SET_TO__(__ELEMENT_AT_FROM__(x, arr))   __ELEMENT_AT_FROM__(y, arr)
__SET_TO__(__ELEMENT_AT_FROM__(y, arr))  elem
__RETURN__  arr
__END__
