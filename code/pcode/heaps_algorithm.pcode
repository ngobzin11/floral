__FUNCTION__ heaps_algorithm(A, n)
__IF__ n __EQUAL_TO__ 1 __THEN__
__RETURN__ A
__END__
__FOR__ __DECLARE_AS__(i) 1; i __LESS_THAN_OR_EQUAL_TO__ n; __INCREMENT__(i)  __DO__
heaps_algorithm(A, n __MINUS__ 1)
__DECLARE_AS__(j) 1
__IF__ n __MODULUS__ 2 __EQUAL_TO__ 0 __THEN__
__SET_TO__(j) i
__END__
__SET_TO__(A) __ARRAYS_SWAP__(j, n, A)
__END__
__END__
__FUNCTION__ __ARRAYS_SWAP__(x, y, arr)
__IF__ arr __IDENTICAL_TO__  __NULL__  __THEN__
__RETURN__ arr
__END__
__DECLARE_AS__(n) __LENGTH_OF__(arr)
__IF__ x __GREATER_THAN_OR_EQUAL_TO__ n __OR__ y __GREATER_THAN_OR_EQUAL_TO__ n __THEN__
__RETURN__ arr
__END__
__SET_TO__(__ELEMENT_AT_FROM__(x, arr) ) __ELEMENT_AT_FROM__(y, arr)
__SET_TO__(__ELEMENT_AT_FROM__(y, arr) ) (__ELEMENT_AT_FROM__(x, arr) )
__RETURN__ arr
__END__
